Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: DNS Configuration
        Parameters:
          - DomainName
          - SubDomainPrefix
          - HostedZoneID
          - Route53HostedSubdomainZone
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
      - Label:
          default: OpenShift Configuration
        Parameters:
          - RegistryBucket
    ParameterLabels:
      RegistryBucket:
        default: Registry Bucket
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      HostedZoneID:
        default: Route 53 Hosted Zone ID
      SubDomainPrefix:
        default: Subdomain Prefix
      Route53HostedSubdomainZone:
        default: Route 53 Subdomain Zone
Parameters:
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-mongodb-atlas/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  RegisterTypeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ResourceTypePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                  - "iam:PassRole"
                  - "iam:CreateRole"
                  - "iam:CreatePolicy"
                  - "iam:ListPolicyVersions"
                  - "iam:DeletePolicyVersion"
                  - "iam:CreatePolicyVersion"
                  - "iam:AttachRolePolicy"
                  - "ssm:GetParameter"
                  - "ssm:PutParameter"
                  - "sts:GetCallerIdentity"
                  - "s3:GetObject"
                Resource: "*"
  ArtifactCopyPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LambdaZipsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: Allow CloudFormation to copy artifacts from the bucket
            Effect: Allow
            Principal:
              Service: "cloudformation.amazonaws.com"
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${LambdaZipsBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}functions/*"
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - functions/packages/cfn-resources/mongodb-atlas-project.zip
        - functions/packages/cfn-resources/mongodb-atlas-cluster.zip
        - functions/packages/cfn-resources/mongodb-atlas-networkpeering.zip
        - functions/packages/cfn-resources/mongodb-atlas-projectipaccesslist.zip
        - functions/packages/cfn-resources/mongodb-atlas-databaseuser.zip

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'

  CustomResourceLogDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - resources.cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ResourceTypePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:PutMetricData"
                Resource: "*"

  CustomResourceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      MaxSessionDuration: 8400
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "resources.cloudformation.amazonaws.com"
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse

          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          

          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          
          
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  RegeisterProjectType:
    DependsOn: CopyZips
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt RegisterTypeFunction.Arn
      TypeName: 'MongoDB::Atlas::Project'
      ArchiveName: 'mongodb-atlas-project.zip'

  RegeisterClusterType:
    DependsOn: CopyZips
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt RegisterTypeFunction.Arn
      TypeName: 'MongoDB::Atlas::Cluster'
      ArchiveName: 'mongodb-atlas-cluster.zip'

  RegeisterDatabaseUserType:
    DependsOn: CopyZips
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt RegisterTypeFunction.Arn
      TypeName: 'MongoDB::Atlas::DatabaseUser'
      ArchiveName: 'mongodb-atlas-databaseuser.zip'


  RegeisterNetworkPeeringType:
    DependsOn: CopyZips
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt RegisterTypeFunction.Arn
      TypeName: 'MongoDB::Atlas::NetworkPeering'
      ArchiveName: 'mongodb-atlas-networkpeering.zip'


  RegeisterProjectIpAccessListType:
    DependsOn: CopyZips
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt RegisterTypeFunction.Arn
      TypeName: 'MongoDB::Atlas::ProjectIpAccessList'
      ArchiveName: 'mongodb-atlas-projectipaccesslist.zip'

  RegisterTypeFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Timeout: 900
      Runtime: python3.7
      Handler: index.handler
      Role: !GetAtt RegisterTypeRole.Arn
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import logging
          import boto3
          from time import sleep

          def stabilize(token, cfn):
              p = cfn.describe_type_registration(RegistrationToken=token)
              while p['ProgressStatus'] == "IN_PROGRESS":
                  sleep(5)
                  p = cfn.describe_type_registration(RegistrationToken=token)
              if p['ProgressStatus'] == 'FAILED':
                  logging.error(p)
                  return cfnresponse.FAILED, p['TypeVersionArn']
              return cfnresponse.SUCCESS, p['TypeVersionArn']

          def register(cfn, type_name, archive_name):
              schema_package = "s3://${LambdaZipsBucket}/${QSS3KeyPrefix}functions/packages/cfn-resources/{}".format(archive_name)
              print("Registering schema package: {} for type: {}".format(schema_package, type_name))
              response = cfn.register_type(
                  Type='RESOURCE',
                  TypeName=type_name,
                  SchemaHandlerPackage=schema_package,
                  LoggingConfig={"LogRoleArn": "${CustomResourceLogDeliveryRole.Arn}", "LogGroupName": "mongodb-atlas-custom-resource-logs"}
                  #,
                  #ExecutionRoleArn="${CustomResourceExecutionRole.Arn}"
              )
              status, version_arn = stabilize(response['RegistrationToken'], cfn)
              cfn.set_type_default_version(Arn=version_arn)
              return status, version_arn

          def handler(event, context):
              print(event)
              status = cfnresponse.SUCCESS
              physical_id = event.get('PhysicalResourceId')
              try:
                  type_name = event['ResourceProperties']['TypeName']
                  archive_name = event['ResourceProperties']['ArchiveName']
                  cfn = boto3.client('cloudformation')
                  if event['RequestType'] == 'Create':
                      status, physical_id = register(cfn, type_name, archive_name)
                  if event['RequestType'] == 'Update':
                      status, physical_id = register(cfn, type_name, archive_name)
                  if event['RequestType'] == 'Delete':
                      versions = cfn.list_type_versions(Type='RESOURCE', TypeName=type_name)['TypeVersionSummaries']
                      if len(versions) > 1:
                          try:
                              cfn.deregister_type(Arn=physical_id)
                          except Exception:
                              logging.error('Failed to deregister individual version %s. Trying to deregister type.', physical_id)
                              cfn.deregister_type(Type='RESOURCE', TypeName=type_name)
                      else:
                          cfn.deregister_type(Type='RESOURCE', TypeName=type_name)
              except Exception:
                  logging.error('Unhandled exception', exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, status, {}, physicalResourceId=physical_id)

Outputs:
  LambdaZipsBucket:
    Description: "The S3 Bucket to store all custom Lambda functions"
    Value: !Ref LambdaZipsBucket
  CopyZipsArn:
    Description: The ARN for the CopyZips custom resource. Use this to move Lambda deployments to a single bucket
    Value: !GetAtt CopyZipsFunction.Arn